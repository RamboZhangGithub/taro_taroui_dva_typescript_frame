declare type IObject = Record<string, any>;
interface IProcessApisIOptions {
    noPromiseApis?: Set<string>;
    needPromiseApis?: Set<string>;
    handleSyncApis?: (key: string, global: IObject, args: any[]) => any;
    transformMeta?: (key: string, options: IObject) => {
        key: string;
        options: IObject;
    };
    modifyAsyncResult?: (key: string, res: any) => void;
    isOnlyPromisify?: boolean;
    [propName: string]: any;
}
declare function processApis(taro: any, global: any, config?: IProcessApisIOptions): void;
export { processApis };

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function isString(o) {
    return typeof o === 'string';
}
function isUndefined(o) {
    return typeof o === 'undefined';
}
function isNull(o) {
    return o === null;
}
function isObject(o) {
    return o !== null && typeof o === 'object';
}
function isBoolean(o) {
    return o === true || o === false;
}
function isFunction(o) {
    return typeof o === 'function';
}
function isNumber(o) {
    return typeof o === 'number';
}
function isBooleanStringLiteral(o) {
    return o === 'true' || o === 'false';
}
var isArray = Array.isArray;

// 字符串简写
(function (Shortcuts) {
    Shortcuts["Container"] = "container";
    Shortcuts["Childnodes"] = "cn";
    Shortcuts["Text"] = "v";
    Shortcuts["NodeType"] = "nt";
    Shortcuts["NodeName"] = "nn";
    // Attrtibutes
    Shortcuts["Style"] = "st";
    Shortcuts["Class"] = "cl";
    Shortcuts["Src"] = "src";
})(exports.Shortcuts || (exports.Shortcuts = {}));

var styles = {
    style: ("i." + ("st")),
    class: ("i." + ("cl"))
};
var events = {
    bindtap: 'eh'
};
var touchEvents = {
    bindTouchStart: '',
    bindTouchMove: '',
    bindTouchEnd: '',
    bindTouchCancel: '',
    bindLongTap: ''
};
var animationEvents = {
    bindAnimationStart: '',
    bindAnimationIteration: '',
    bindAnimationEnd: '',
    bindTransitionEnd: ''
};
var specialEvents = new Set([
    'htouchmove',
    'vtouchmove'
]);
function singleQuote(s) {
    return ("'" + s + "'");
}
var View = Object.assign(Object.assign({ 'hover-class': singleQuote('none'), 'hover-stop-propagation': 'false', 'hover-start-time': '50', 'hover-stay-time': '400', animation: '' }, touchEvents), animationEvents);
var Icon = {
    type: '',
    size: '23',
    color: ''
};
var MapComp = Object.assign({ longitude: '', latitude: '', scale: '16', markers: '[]', covers: '', polyline: '[]', circles: '[]', controls: '[]', 'include-points': '[]', 'show-location': '', 'layer-style': '1', bindMarkerTap: '', bindControlTap: '', bindCalloutTap: '', bindUpdated: '' }, touchEvents);
var Progress = {
    percent: '',
    'stroke-width': '6',
    color: singleQuote('#09BB07'),
    activeColor: singleQuote('#09BB07'),
    backgroundColor: singleQuote('#EBEBEB'),
    active: 'false',
    'active-mode': singleQuote('backwards'),
    'show-info': 'false'
};
var RichText = {
    nodes: '[]'
};
var Text = {
    selectable: 'false',
    space: '',
    decode: 'false'
};
var Button = {
    size: singleQuote('default'),
    type: '',
    plain: 'false',
    disabled: '',
    loading: 'false',
    'form-type': '',
    'open-type': '',
    'hover-class': singleQuote('button-hover'),
    'hover-stop-propagation': 'false',
    'hover-start-time': '20',
    'hover-stay-time': '70',
    name: ''
};
var Checkbox = {
    value: '',
    disabled: '',
    checked: 'false',
    color: singleQuote('#09BB07'),
    name: ''
};
var CheckboxGroup = {
    bindChange: '',
    name: ''
};
var Form = {
    'report-submit': 'false',
    bindSubmit: '',
    bindReset: '',
    name: ''
};
var Input = {
    value: '',
    type: singleQuote(''),
    password: 'false',
    placeholder: '',
    'placeholder-style': '',
    'placeholder-class': singleQuote('input-placeholder'),
    disabled: '',
    maxlength: '140',
    'cursor-spacing': '0',
    focus: 'false',
    'confirm-type': singleQuote('done'),
    'confirm-hold': 'false',
    cursor: 'i.value.length',
    'selection-start': '-1',
    'selection-end': '-1',
    bindInput: '',
    bindFocus: '',
    bindBlur: '',
    bindConfirm: '',
    name: ''
};
var Label = {
    for: '',
    name: ''
};
var Picker = {
    mode: singleQuote('selector'),
    disabled: '',
    range: '',
    'range-key': '',
    value: '',
    start: '',
    end: '',
    fields: singleQuote('day'),
    'custom-item': '',
    name: '',
    bindCancel: '',
    bindChange: '',
    bindColumnChange: ''
};
var PickerView = {
    value: '',
    'indicator-style': '',
    'indicator-class': '',
    'mask-style': '',
    'mask-class': '',
    bindChange: '',
    name: ''
};
var PickerViewColumn = {
    name: ''
};
var Radio = {
    value: '',
    checked: 'false',
    disabled: '',
    color: singleQuote('#09BB07'),
    name: ''
};
var RadioGroup = {
    bindChange: '',
    name: ''
};
var Slider = {
    min: '0',
    max: '100',
    step: '1',
    disabled: '',
    value: '0',
    activeColor: singleQuote('#1aad19'),
    backgroundColor: singleQuote('#e9e9e9'),
    'block-size': '28',
    'block-color': singleQuote('#ffffff'),
    'show-value': 'false',
    bindChange: '',
    bindChanging: '',
    name: ''
};
var Switch = {
    checked: 'false',
    disabled: '',
    type: singleQuote('switch'),
    color: singleQuote('#04BE02'),
    bindChange: '',
    name: ''
};
var Textarea = {
    value: '',
    placeholder: '',
    'placeholder-style': '',
    'placeholder-class': singleQuote('textarea-placeholder'),
    disabled: '',
    maxlength: '140',
    'auto-focus': 'false',
    focus: 'false',
    'auto-height': 'false',
    fixed: 'false',
    'cursor-spacing': '0',
    cursor: '-1',
    'selection-start': '-1',
    'selection-end': '-1',
    bindFocus: '',
    bindBlur: '',
    bindLineChange: '',
    bindInput: '',
    bindConfirm: '',
    name: ''
};
var CoverImage = {
    src: '',
    bindLoad: 'eh',
    bindError: 'eh'
};
var CoverView = Object.assign({ 'scroll-top': 'false' }, touchEvents);
var MovableArea = {
    'scale-area': 'false'
};
var MovableView = Object.assign(Object.assign({ direction: 'none', inertia: 'false', 'out-of-bounds': 'false', x: '', y: '', damping: '20', friction: '2', disabled: '', scale: 'false', 'scale-min': '0.5', 'scale-max': '10', 'scale-value': '1', animation: 'true', bindChange: '', bindScale: '', htouchmove: '', vtouchmove: '', width: singleQuote('10px'), height: singleQuote('10px') }, touchEvents), animationEvents);
var ScrollView = Object.assign(Object.assign({ 'scroll-x': 'false', 'scroll-y': 'false', 'upper-threshold': '50', 'lower-threshold': '50', 'scroll-top': '', 'scroll-left': '', 'scroll-into-view': '', 'scroll-with-animation': 'false', 'enable-back-to-top': 'false', bindScrollToUpper: '', bindScrollToLower: '', bindScroll: '' }, touchEvents), animationEvents);
var Swiper = Object.assign({ 'indicator-dots': 'false', 'indicator-color': singleQuote('rgba(0, 0, 0, .3)'), 'indicator-active-color': singleQuote('#000000'), autoplay: 'false', current: '0', interval: '5000', duration: '500', circular: 'false', vertical: 'false', 'previous-margin': '\'0px\'', 'next-margin': '\'0px\'', 'display-multiple-items': '1', bindChange: '', bindTransition: '', bindAnimationFinish: '' }, touchEvents);
var SwiperItem = {
    'item-id': ''
};
var Navigator = {
    url: '',
    'open-type': singleQuote('navigate'),
    delta: '1',
    'hover-class': singleQuote('navigator-hover'),
    'hover-stop-propagation': 'false',
    'hover-start-time': '50',
    'hover-stay-time': '600',
    bindSuccess: '',
    bindFail: '',
    bindComplete: ''
};
var Audio = {
    id: '',
    src: '',
    loop: 'false',
    controls: 'false',
    poster: '',
    name: '',
    author: '',
    bindError: '',
    bindPlay: '',
    bindPause: '',
    bindTimeUpdate: '',
    bindEnded: ''
};
var Camera = {
    'device-position': singleQuote('back'),
    flash: singleQuote('auto'),
    bindStop: '',
    bindError: ''
};
var Image = Object.assign({ src: '', mode: singleQuote('scaleToFill'), 'lazy-load': 'false', bindError: '', bindLoad: '' }, touchEvents);
var LivePlayer = {
    src: '',
    autoplay: 'false',
    muted: 'false',
    orientation: singleQuote('vertical'),
    'object-fit': singleQuote('contain'),
    'background-mute': 'false',
    'min-cache': '1',
    'max-cache': '3',
    animation: '',
    bindStateChange: '',
    bindFullScreenChange: '',
    bindNetStatus: ''
};
var Video = {
    src: '',
    duration: '',
    controls: 'true',
    'danmu-list': '',
    'danmu-btn': '',
    'enable-danmu': '',
    autoplay: 'false',
    loop: 'false',
    muted: 'false',
    'initial-time': '0',
    'page-gesture': 'false',
    direction: '',
    'show-progress': 'true',
    'show-fullscreen-btn': 'true',
    'show-play-btn': 'true',
    'show-center-play-btn': 'true',
    'enable-progress-gesture': 'true',
    'object-fit': singleQuote('contain'),
    poster: '',
    'show-mute-btn': 'false',
    animation: '',
    bindPlay: '',
    bindPause: '',
    bindEnded: '',
    bindTimeUpdate: '',
    bindFullScreenChange: '',
    bindWaiting: '',
    bindError: ''
};
var Canvas = Object.assign({ 'canvas-id': '', 'disable-scroll': 'false', bindError: '' }, touchEvents);
var Ad = {
    'unit-id': '',
    'ad-intervals': '',
    bindLoad: '',
    bindError: '',
    bindClose: ''
};
var WebView = {
    src: '',
    bindMessage: '',
    bindLoad: '',
    bindError: ''
};
var Block = {};
// For Vue，因为 slot 标签被 vue 占用了
var SlotView = {
    name: ''
};
// For React
// Slot 和 SlotView 最终都会编译成 <view slot={{ i.name }} />
// 因为 <slot name="{{ i.name }}" /> 适用性没有前者高（无法添加类和样式）
// 不给 View 直接加 slot 属性的原因是性能损耗
var Slot = {
    name: ''
};
var internalComponents = {
    View: View,
    Icon: Icon,
    Progress: Progress,
    RichText: RichText,
    Text: Text,
    Button: Button,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    Form: Form,
    Input: Input,
    Label: Label,
    Picker: Picker,
    PickerView: PickerView,
    PickerViewColumn: PickerViewColumn,
    Radio: Radio,
    RadioGroup: RadioGroup,
    Slider: Slider,
    Switch: Switch,
    CoverImage: CoverImage,
    Textarea: Textarea,
    CoverView: CoverView,
    MovableArea: MovableArea,
    MovableView: MovableView,
    ScrollView: ScrollView,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    Navigator: Navigator,
    Audio: Audio,
    Camera: Camera,
    Image: Image,
    LivePlayer: LivePlayer,
    Video: Video,
    Canvas: Canvas,
    Ad: Ad,
    WebView: WebView,
    Block: Block,
    Map: MapComp,
    Slot: Slot,
    SlotView: SlotView
};
var controlledComponent = new Set([
    'input',
    'checkbox',
    'picker',
    'picker-view',
    'radio',
    'slider',
    'switch',
    'textarea'
]);
var focusComponents = new Set([
    'input',
    'textarea'
]);
var voidElements = new Set([
    'progress',
    'icon',
    'rich-text',
    'input',
    'textarea',
    'slider',
    'switch',
    'audio',
    'ad',
    'official-account',
    'open-data',
    'navigation-bar'
]);
var nestElements = new Map([
    ['view', -1],
    ['catch-view', -1],
    ['cover-view', -1],
    ['static-view', -1],
    ['pure-view', -1],
    ['block', -1],
    ['text', -1],
    ['static-text', 6],
    ['slot', 8],
    ['slot-view', 8],
    ['label', 6],
    ['form', 4],
    ['scroll-view', 4],
    ['swiper', 4],
    ['swiper-item', 4]
]);

var EMPTY_OBJ = {};
var EMPTY_ARR = [];
var noop = function () {
    var _ = [], len = arguments.length;
    while ( len-- ) _[ len ] = arguments[ len ];
 };
var defaultReconciler = {};
/**
 * box creates a boxed value.
 *
 * @typeparam T Value type.
 * @param v Value.
 * @returns Boxed value.
 */
var box = function (v) { return ({ v: v }); };
/**
 * box creates a boxed value.
 *
 * @typeparam T Value type.
 * @param b Boxed value.
 * @returns Value.
 */
var unbox = function (b) { return b.v; };
function toDashed(s) {
    return s.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}
function toCamelCase(s) {
    var camel = '';
    var nextCap = false;
    for (var i = 0; i < s.length; i++) {
        if (s[i] !== '-') {
            camel += nextCap ? s[i].toUpperCase() : s[i];
            nextCap = false;
        }
        else {
            nextCap = true;
        }
    }
    return camel;
}
var toKebabCase = function (string) {
    return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
};
function capitalize(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = function (val, key) { return hasOwnProperty.call(val, key); };
var reportIssue = '如有疑问，请提交 issue 至：https://github.com/nervjs/taro/issues';
/**
 * ensure takes a condition and throw a error if the condition fails,
 * like failure::ensure: https://docs.rs/failure/0.1.1/failure/macro.ensure.html
 * @param condition condition.
 * @param msg error message.
 */
function ensure(condition, msg) {
    if (!condition) {
        throw new Error(msg + '\n' + reportIssue);
    }
}
function warn(condition, msg) {
    if (process.env.NODE_ENV !== 'production') {
        if (condition) {
            console.warn(msg);
        }
    }
}
function queryToJson(str) {
    var dec = decodeURIComponent;
    var qp = str.split('&');
    var ret = {};
    var name;
    var val;
    for (var i = 0, l = qp.length, item = (void 0); i < l; ++i) {
        item = qp[i];
        if (item.length) {
            var s = item.indexOf('=');
            if (s < 0) {
                name = dec(item);
                val = '';
            }
            else {
                name = dec(item.slice(0, s));
                val = dec(item.slice(s + 1));
            }
            if (typeof ret[name] === 'string') { // inline'd type check
                ret[name] = [ret[name]];
            }
            if (Array.isArray(ret[name])) {
                ret[name].push(val);
            }
            else {
                ret[name] = val;
            }
        }
    }
    return ret; // Object
}
var _uniqueId = 1;
var _loadTime = (new Date()).getTime().toString();
function getUniqueKey() {
    return _loadTime + (_uniqueId++);
}
var cacheData = {};
function cacheDataSet(key, val) {
    cacheData[key] = val;
}
function cacheDataGet(key, delelteAfterGet) {
    var temp = cacheData[key];
    delelteAfterGet && delete cacheData[key];
    return temp;
}
function cacheDataHas(key) {
    return key in cacheData;
}
function mergeInternalComponents(components) {
    Object.keys(components).forEach(function (name) {
        if (name in internalComponents) {
            Object.assign(internalComponents[name], components[name]);
        }
        else {
            internalComponents[name] = components[name];
        }
    });
}
function mergeReconciler(hostConfig) {
    Object.assign(defaultReconciler, hostConfig);
}
function unsupport(api) {
    return function () {
        console.warn(("小程序暂不支持 " + api));
    };
}
function setUniqueKeyToRoute(key, obj) {
    var routerParamsPrivateKey = '__key_';
    var useDataCacheApis = [
        'navigateTo',
        'redirectTo',
        'reLaunch',
        'switchTab'
    ];
    if (useDataCacheApis.indexOf(key) > -1) {
        var url = obj.url = obj.url || '';
        var hasMark = url.indexOf('?') > -1;
        var cacheKey = getUniqueKey();
        obj.url += (hasMark ? '&' : '?') + routerParamsPrivateKey + "=" + cacheKey;
    }
}

/**
 * 这里我们需要关心的小程序种类有两类：
 * 1. 模板递归：
 *  - 支持：tmpl0 套 tmpl0
 *  - 不支持：这就使得我们必须生成多级的模板，tmpl0 套 tmpl1，tmpl1 套 tmpl2……
 *           直到超过阈值 N (N = config.miniapp.baseLevel) tmplN 会套组件 comp，组件 comp 重新再套 tmpl0。
 * 2. 小程序脚本语言（wxs, sjs, etc...）：
 *  - 支持：可以在模板使用函数缩减模板大小或提高性能（存疑），例如判断一个值是不是假值（falsy value）。
 *         将来或许会把数据序列化^1 的操作也放到小程序脚本语言里。
 *  - 不支持：使用纯 *xml 语法
 *
 * ^1: packages/taro-runtime/src/hydrate.ts
*/
var weixinAdapter = {
    if: 'wx:if',
    else: 'wx:else',
    elseif: 'wx:elif',
    for: 'wx:for',
    forItem: 'wx:for-item',
    forIndex: 'wx:for-index',
    key: 'wx:key',
    xs: 'wxs',
    type: 'weapp'
};
var BaseTemplate = function BaseTemplate() {
      var this$1 = this;

      this.exportExpr = 'module.exports =';
      this.supportXS = false;
      this.Adapter = weixinAdapter;
      /** 组件列表 */
      this.internalComponents = internalComponents;
      /** 可以 focus 聚焦的组件 */
      this.focusComponents = focusComponents;
      /** 不需要渲染子节点的元素 */
      this.voidElements = voidElements;
      /** 可以递归调用自身的组件 */
      this.nestElements = nestElements;
      this.buildPageTemplate = function (baseTempPath) {
          var template = "<import src=\"" + baseTempPath + "\"/>\n<template is=\"taro_tmpl\" data=\"{{" + (this$1.dataKeymap('root:root')) + "}}\" />";
          return template;
      };
      this.buildBaseComponentTemplate = function (ext) {
          var data = !this$1.isSupportRecursive && this$1.supportXS
              ? this$1.dataKeymap('i:i,l:l')
              : this$1.dataKeymap('i:i');
          return ("<import src=\"./base" + ext + "\" />\n<template is=\"tmpl_0_" + ("container") + "\" data=\"{{" + data + "}}\" />");
      };
      this.buildCustomComponentTemplate = function (ext) {
          var Adapter = this$1.Adapter;
          var data = !this$1.isSupportRecursive && this$1.supportXS
              ? ("" + (this$1.dataKeymap('i:item,l:\'\'')))
              : this$1.dataKeymap('i:item');
          return ("<import src=\"./base" + ext + "\" />\n  <block " + (Adapter.for) + "=\"{{i." + ("cn") + "}}\" " + (Adapter.key) + "=\"uid\">\n    <template is=\"tmpl_0_container\" data=\"{{" + data + "}}\" />\n  </block>");
      };
      this.buildXScript = function () {
          return ((this$1.exportExpr) + " {\n  a: " + (this$1.buildXSTmplName()) + ",\n  b: function (a, b) {\n    return a === undefined ? b : a\n  },\n  c: function(i, prefix) {\n    var s = i.focus !== undefined ? 'focus' : 'blur'\n    return prefix + i." + ("nn") + " + '_' + s\n  },\n  d: function (i, v) {\n    return i === undefined ? v : i\n  },\n  e: function (n) {\n    return 'tmpl_' + n + '_" + ("container") + "'\n  },\n  " + (this$1.buildXSTmpExtra()) + "\n}");
      };
  };
  BaseTemplate.prototype.buildAttribute = function buildAttribute (attrs, nodeName) {
        var this$1 = this;

      return Object.keys(attrs)
          .map(function (k) { return (k + "=\"" + (k.startsWith('bind') || k.startsWith('on') || k.startsWith('catch') ? attrs[k] : ("{" + (this$1.getAttrValue(attrs[k], k, nodeName)) + "}")) + "\" "); })
          .join('');
  };
  BaseTemplate.prototype.replacePropName = function replacePropName (name, value, _componentName) {
      if (value === 'eh')
          { return name.toLowerCase(); }
      return name;
  };
  BaseTemplate.prototype.createMiniComponents = function createMiniComponents (components) {
      var result = Object.create(null);
      for (var key in components) {
          if (hasOwn(components, key)) {
              var component = components[key];
              var compName = toDashed(key);
              var newComp = Object.create(null);
              if (isFunction(this.modifyCompProps)) {
                  component = this.modifyCompProps(compName, component);
              }
              for (var prop in component) {
                  if (hasOwn(component, prop)) {
                      var propValue = component[prop];
                      if (prop.startsWith('bind') || specialEvents.has(prop)) {
                          propValue = 'eh';
                      }
                      else if (propValue === '') {
                          propValue = "i." + (toCamelCase(prop));
                      }
                      else if (isBooleanStringLiteral(propValue) || isNumber(+propValue)) {
                          propValue = this.supportXS
                              ? ("xs.b(i." + (toCamelCase(prop)) + "," + propValue + ")")
                              : ("i." + (toCamelCase(prop)) + "===undefined?" + propValue + ":i." + (toCamelCase(prop)));
                      }
                      else {
                          propValue = "i." + (toCamelCase(prop)) + "||" + (propValue || singleQuote(''));
                      }
                      prop = this.replacePropName(prop, propValue, compName);
                      newComp[prop] = propValue;
                  }
              }
              if (compName !== 'block') {
                  Object.assign(newComp, styles, this.getEvents());
              }
              if (compName === 'swiper-item') {
                  delete newComp.style;
              }
              if (compName === 'view') {
                  var reg = /^(bind|on)(touchmove|TouchMove)$/;
                  var comp = Object.assign({}, newComp);
                  Object.keys(comp).forEach(function (originKey) {
                      if (!reg.test(originKey))
                          { return; }
                      var key = originKey.replace(reg, 'catch$2');
                      comp[key] = comp[originKey];
                      delete comp[originKey];
                  });
                  result['catch-view'] = comp;
              }
              if (compName === 'view' || compName === 'text' || compName === 'image') {
                  var comp$1 = {};
                  Object.keys(newComp).forEach(function (key) {
                      var value = newComp[key];
                      if (value !== 'eh')
                          { comp$1[key] = value; }
                  });
                  result[("static-" + compName)] = comp$1;
                  if (compName === 'view') {
                      result['pure-view'] = {
                          style: comp$1.style,
                          class: comp$1.class
                      };
                  }
              }
              if (compName === 'slot' || compName === 'slot-view') {
                  result[compName] = {
                      slot: 'i.name'
                  };
              }
              else {
                  result[compName] = newComp;
              }
          }
      }
      return result;
  };
  BaseTemplate.prototype.buildBaseTemplate = function buildBaseTemplate () {
      var Adapter = this.Adapter;
      var data = !this.isSupportRecursive && this.supportXS
          ? ("" + (this.dataKeymap('i:item,l:\'\'')))
          : this.dataKeymap('i:item');
      return ((this.buildXsTemplate()) + "\n<template name=\"taro_tmpl\">\n  <block " + (Adapter.for) + "=\"{{root.cn}}\" " + (Adapter.key) + "=\"uid\">\n    <template is=\"tmpl_0_" + ("container") + "\" data=\"{{" + data + "}}\" />\n  </block>\n</template>\n");
  };
  BaseTemplate.prototype.buildThirdPartyAttr = function buildThirdPartyAttr (attrs) {
      return Array.from(attrs).reduce(function (str, attr) {
          if (attr.startsWith('@')) {
              // vue2
              var value = attr.slice(1);
              if (value.indexOf('-') > -1) {
                  value = ":" + value;
              }
              return str + "bind" + value + "=\"eh\" ";
          }
          else if (attr.startsWith('bind')) {
              return str + attr + "=\"eh\" ";
          }
          else if (attr.startsWith('on')) {
              // react, vue3
              var value$1 = toKebabCase(attr.slice(2));
              if (value$1.indexOf('-') > -1) {
                  // 兼容如 vant 某些组件的 bind:a-b 这类属性
                  value$1 = ":" + value$1;
              }
              return str + "bind" + value$1 + "=\"eh\" ";
          }
          return str + attr + "=\"{{i." + (toCamelCase(attr)) + "}}\" ";
      }, '');
  };
  BaseTemplate.prototype.buildComponentTemplate = function buildComponentTemplate (comp, level) {
      return this.focusComponents.has(comp.nodeName)
          ? this.buildFocusComponentTemplte(comp, level)
          : this.buildStandardComponentTemplate(comp, level);
  };
  BaseTemplate.prototype.buildFocusComponentTemplte = function buildFocusComponentTemplte (comp, level) {
      var attrs = Object.assign({}, comp.attributes);
      var templateName = this.supportXS
          ? ("xs.c(i, 'tmpl_" + level + "_')")
          : ("i.focus ? 'tmpl_" + level + "_" + (comp.nodeName) + "_focus' : 'tmpl_" + level + "_" + (comp.nodeName) + "_blur'");
      delete attrs.focus;
      return ("\n<template name=\"tmpl_" + level + "_" + (comp.nodeName) + "\">\n  <template is=\"{{" + templateName + "}}\" data=\"{{" + (this.dataKeymap('i:i')) + "}}\" />\n</template>\n\n<template name=\"tmpl_" + level + "_" + (comp.nodeName) + "_focus\">\n  <" + (comp.nodeName) + " " + (this.buildAttribute(comp.attributes, comp.nodeName)) + " id=\"{{i.uid}}\" />\n</template>\n\n<template name=\"tmpl_" + level + "_" + (comp.nodeName) + "_blur\">\n  <" + (comp.nodeName) + " " + (this.buildAttribute(attrs, comp.nodeName)) + " id=\"{{i.uid}}\" />\n</template>\n");
  };
  BaseTemplate.prototype.buildStandardComponentTemplate = function buildStandardComponentTemplate (comp, level) {
      var ref = this;
        var isSupportRecursive = ref.isSupportRecursive;
        var Adapter = ref.Adapter;
      var nextLevel = isSupportRecursive ? 0 : level + 1;
      var data = !this.isSupportRecursive && this.supportXS
          ? ("" + (this.dataKeymap('i:item,l:l')))
          : this.dataKeymap('i:item');
      var child = this.supportXS
          ? ("<template is=\"{{xs.e(" + (isSupportRecursive ? 0 : 'cid+1') + ")}}\" data=\"{{" + data + "}}\" />")
          : ("<template is=\"tmpl_" + nextLevel + "_" + ("container") + "\" data=\"{{" + data + "}}\" />");
      if (isFunction(this.modifyLoopBody)) {
          child = this.modifyLoopBody(child, comp.nodeName);
      }
      var children = this.voidElements.has(comp.nodeName)
          ? ''
          : ("\n    <block " + (Adapter.for) + "=\"{{i." + ("cn") + "}}\" " + (Adapter.key) + "=\"uid\">\n      " + child + "\n    </block>\n  ");
      if (isFunction(this.modifyLoopContainer)) {
          children = this.modifyLoopContainer(children, comp.nodeName);
      }
      var nodeName = '';
      switch (comp.nodeName) {
          case 'slot':
          case 'slot-view':
          case 'catch-view':
          case 'static-view':
          case 'pure-view':
              nodeName = 'view';
              break;
          case 'static-text':
              nodeName = 'text';
              break;
          case 'static-image':
              nodeName = 'image';
              break;
          default:
              nodeName = comp.nodeName;
              break;
      }
      var res = "\n<template name=\"tmpl_" + level + "_" + (comp.nodeName) + "\">\n  <" + nodeName + " " + (this.buildAttribute(comp.attributes, comp.nodeName)) + " id=\"{{i.uid}}\">" + children + "</" + nodeName + ">\n</template>\n";
      if (isFunction(this.modifyTemplateResult)) {
          res = this.modifyTemplateResult(res, comp.nodeName, level, children);
      }
      return res;
  };
  BaseTemplate.prototype.buildPlainTextTemplate = function buildPlainTextTemplate (level) {
      return ("\n<template name=\"tmpl_" + level + "_#text\" data=\"{{" + (this.dataKeymap('i:i')) + "}}\">\n  <block>{{i." + ("v") + "}}</block>\n</template>\n");
  };
  BaseTemplate.prototype.buildThirdPartyTemplate = function buildThirdPartyTemplate (level, componentConfig) {
        var this$1 = this;

      var ref = this;
        var Adapter = ref.Adapter;
        var isSupportRecursive = ref.isSupportRecursive;
        var supportXS = ref.supportXS;
        var nestElements = ref.nestElements;
      var nextLevel = isSupportRecursive ? 0 : level + 1;
      var template = '';
      var data = !isSupportRecursive && supportXS
          ? ("" + (this.dataKeymap('i:item,l:l')))
          : this.dataKeymap('i:item');
      componentConfig.thirdPartyComponents.forEach(function (attrs, compName) {
          if (compName === 'custom-wrapper') {
              template += "\n<template name=\"tmpl_" + level + "_" + compName + "\">\n  <" + compName + " i=\"{{i}}\" l=\"{{l}}\" id=\"{{i.uid}}\">\n  </" + compName + ">\n</template>\n  ";
          }
          else {
              if (!isSupportRecursive && supportXS && nestElements.has(compName) && level + 1 > nestElements.get(compName))
                  { return; }
              var child = supportXS
                  ? ("<template is=\"{{xs.e(" + (isSupportRecursive ? 0 : 'cid+1') + ")}}\" data=\"{{" + data + "}}\" />")
                  : ("<template is=\"tmpl_" + nextLevel + "_" + ("container") + "\" data=\"{{" + data + "}}\" />");
              template += "\n<template name=\"tmpl_" + level + "_" + compName + "\">\n  <" + compName + " " + (this$1.buildThirdPartyAttr(attrs)) + " id=\"{{i.uid}}\">\n    <block " + (Adapter.for) + "=\"{{i." + ("cn") + "}}\" " + (Adapter.key) + "=\"uid\">\n      " + child + "\n    </block>\n  </" + compName + ">\n</template>\n  ";
          }
      });
      return template;
  };
  BaseTemplate.prototype.buildContainerTemplate = function buildContainerTemplate (level, restart) {
        if ( restart === void 0 ) restart = false;

      var tmpl = '';
      if (restart) {
          tmpl = "<block " + (this.Adapter.if) + "=\"{{i.nn === '#text'}}\">\n    <template is=\"tmpl_0_#text\" data=\"{{i:i}}\" />\n  </block>\n  <block " + (this.Adapter.else) + ">\n    " + (!this.isSupportRecursive && this.supportXS ? '<comp i="{{i}}" l="{{l}}" />' : '<comp i="{{i}}" />') + "\n  </block>";
      }
      else {
          var xs = !this.isSupportRecursive
              ? ("xs.a(" + level + ", i." + ("nn") + ", l)")
              : ("xs.a(" + level + ", i." + ("nn") + ")");
          var data = !this.isSupportRecursive
              ? ("" + (this.dataKeymap(("i:i,cid:" + level + ",l:xs.f(l,i." + ("nn") + ")"))))
              : ("" + (this.dataKeymap('i:i')));
          tmpl = this.supportXS
              ? ("<template is=\"{{" + xs + "}}\" data=\"{{" + data + "}}\" />")
              : ("<template is=\"{{'tmpl_" + level + "_' + i." + ("nn") + "}}\" data=\"{{" + (this.dataKeymap('i:i')) + "}}\" />");
      }
      return ("\n<template name=\"tmpl_" + level + "_" + ("container") + "\">\n  " + tmpl + "\n</template>\n");
  };
  BaseTemplate.prototype.dataKeymap = function dataKeymap (keymap) {
      return keymap;
  };
  BaseTemplate.prototype.getEvents = function getEvents () {
      return events;
  };
  BaseTemplate.prototype.getAttrValue = function getAttrValue (value, _key, _nodeName) {
      return ("{" + value + "}");
  };
  BaseTemplate.prototype.buildXsTemplate = function buildXsTemplate () {
      return '';
  };
  BaseTemplate.prototype.mergeComponents = function mergeComponents (ctx, patch) {
      ctx.helper.recursiveMerge(this.internalComponents, patch);
  };
  BaseTemplate.prototype.buildXSTmplName = function buildXSTmplName () {
      return "function (l, n) {\n    return 'tmpl_' + l + '_' + n\n  }";
  };
  BaseTemplate.prototype.buildXSTmpExtra = function buildXSTmpExtra () {
      return '';
  };
var RecursiveTemplate = /*@__PURE__*/(function (BaseTemplate) {
  function RecursiveTemplate() {
        var this$1 = this;

        BaseTemplate.apply(this, arguments);
        this.isSupportRecursive = true;
        this.buildTemplate = function (componentConfig) {
            var template = this$1.buildBaseTemplate();
            if (!this$1.miniComponents) {
                this$1.miniComponents = this$1.createMiniComponents(this$1.internalComponents);
            }
            var ZERO_FLOOR = 0;
            var components = Object.keys(this$1.miniComponents)
                .filter(function (c) { return componentConfig.includes.size && !componentConfig.includeAll ? componentConfig.includes.has(c) : true; });
            template = components.reduce(function (current, nodeName) {
                var attributes = this$1.miniComponents[nodeName];
                return current + this$1.buildComponentTemplate({ nodeName: nodeName, attributes: attributes }, ZERO_FLOOR);
            }, template);
            template += this$1.buildPlainTextTemplate(ZERO_FLOOR);
            template += this$1.buildThirdPartyTemplate(ZERO_FLOOR, componentConfig);
            template += this$1.buildContainerTemplate(ZERO_FLOOR);
            return template;
        };
    }

  if ( BaseTemplate ) RecursiveTemplate.__proto__ = BaseTemplate;
  RecursiveTemplate.prototype = Object.create( BaseTemplate && BaseTemplate.prototype );
  RecursiveTemplate.prototype.constructor = RecursiveTemplate;

  return RecursiveTemplate;
}(BaseTemplate));
var UnRecursiveTemplate = /*@__PURE__*/(function (BaseTemplate) {
  function UnRecursiveTemplate() {
        var this$1 = this;

        BaseTemplate.apply(this, arguments);
        this.isSupportRecursive = false;
        this._baseLevel = 16;
        this.buildTemplate = function (componentConfig) {
            this$1.componentConfig = componentConfig;
            if (!this$1.miniComponents) {
                this$1.miniComponents = this$1.createMiniComponents(this$1.internalComponents);
            }
            var components = Object.keys(this$1.miniComponents)
                .filter(function (c) { return componentConfig.includes.size && !componentConfig.includeAll ? componentConfig.includes.has(c) : true; });
            var template = this$1.buildBaseTemplate();
            for (var i = 0; i < this$1.baseLevel; i++) {
                template += this$1.supportXS
                    ? this$1.buildOptimizeFloor(i, components, this$1.baseLevel === i + 1)
                    : this$1.buildFloor(i, components, this$1.baseLevel === i + 1);
            }
            return template;
        };
    }

  if ( BaseTemplate ) UnRecursiveTemplate.__proto__ = BaseTemplate;
  UnRecursiveTemplate.prototype = Object.create( BaseTemplate && BaseTemplate.prototype );
  UnRecursiveTemplate.prototype.constructor = UnRecursiveTemplate;

  var prototypeAccessors = { baseLevel: { configurable: true } };
    prototypeAccessors.baseLevel.set = function (lv) {
        this._baseLevel = lv;
    };
    prototypeAccessors.baseLevel.get = function () {
        return this._baseLevel;
    };
    UnRecursiveTemplate.prototype.buildFloor = function buildFloor (level, components, restart) {
        var this$1 = this;
        if ( restart === void 0 ) restart = false;

        if (restart)
            { return this.buildContainerTemplate(level, restart); }
        var template = components.reduce(function (current, nodeName) {
            var attributes = this$1.miniComponents[nodeName];
            return current + this$1.buildComponentTemplate({ nodeName: nodeName, attributes: attributes }, level);
        }, '');
        template += this.buildPlainTextTemplate(level);
        template += this.buildThirdPartyTemplate(level, this.componentConfig);
        template += this.buildContainerTemplate(level, restart);
        return template;
    };
    UnRecursiveTemplate.prototype.buildOptimizeFloor = function buildOptimizeFloor (level, components, restart) {
        var this$1 = this;
        if ( restart === void 0 ) restart = false;

        if (restart)
            { return this.buildContainerTemplate(level, restart); }
        var template = components.reduce(function (current, nodeName) {
            if (level !== 0) {
                if (!this$1.nestElements.has(nodeName)) {
                    // 不可嵌套自身的组件只需输出一层模板
                    return current;
                }
                else {
                    // 部分可嵌套自身的组件实际上不会嵌套过深，这里按阈值限制层数
                    var max = this$1.nestElements.get(nodeName);
                    if (max > 0 && level >= max) {
                        return current;
                    }
                }
            }
            var attributes = this$1.miniComponents[nodeName];
            return current + this$1.buildComponentTemplate({ nodeName: nodeName, attributes: attributes }, level);
        }, '');
        if (level === 0)
            { template += this.buildPlainTextTemplate(level); }
        template += this.buildThirdPartyTemplate(level, this.componentConfig);
        template += this.buildContainerTemplate(level);
        return template;
    };
    UnRecursiveTemplate.prototype.buildXSTmplName = function buildXSTmplName () {
        var isLoopComps = Array.from(this.nestElements.keys()).concat( Array.from(this.componentConfig.thirdPartyComponents.keys())
        );
        var isLoopCompsSet = new Set(isLoopComps);
        var hasMaxComps = [];
        this.nestElements.forEach(function (max, comp) {
            if (max > 1) {
                hasMaxComps.push(comp);
            }
            else if (max === 1 && isLoopCompsSet.has(comp)) {
                isLoopCompsSet.delete(comp);
            }
        });
        return ("function (l, n, s) {\n    var a = " + (JSON.stringify(Array.from(isLoopCompsSet))) + "\n    var b = " + (JSON.stringify(hasMaxComps)) + "\n    if (a.indexOf(n) === -1) {\n      l = 0\n    }\n    if (b.indexOf(n) > -1) {\n      var u = s.split(',')\n      var depth = 0\n      for (var i = 0; i < u.length; i++) {\n        if (u[i] === n) depth++\n      }\n      l = depth\n    }\n    return 'tmpl_' + l + '_' + n\n  }");
    };
    UnRecursiveTemplate.prototype.buildXSTmpExtra = function buildXSTmpExtra () {
        var hasMaxComps = [];
        this.nestElements.forEach(function (max, comp) {
            if (max > 1)
                { hasMaxComps.push(comp); }
        });
        return ("f: function (l, n) {\n    var b = " + (JSON.stringify(hasMaxComps)) + "\n    if (b.indexOf(n) > -1) {\n      if (l) l += ','\n      l += n\n    }\n    return l\n  }");
    };

  Object.defineProperties( UnRecursiveTemplate.prototype, prototypeAccessors );

  return UnRecursiveTemplate;
}(BaseTemplate));

var noPromiseApis = new Set([
    'clearStorageSync',
    'getBatteryInfoSync',
    'getExtConfigSync',
    'getFileSystemManager',
    'getLaunchOptionsSync',
    'getStorageInfoSync',
    'getStorageSync',
    'getSystemInfoSync',
    'offAccelerometerChange',
    'offAppHide',
    'offAppShow',
    'offAudioInterruptionBegin',
    'offAudioInterruptionEnd',
    'offBLECharacteristicValueChange',
    'offBLEConnectionStateChange',
    'offBluetoothAdapterStateChange',
    'offBluetoothDeviceFound',
    'offCompassChange',
    'offError',
    'offGetWifiList',
    'offGyroscopeChange',
    'offMemoryWarning',
    'offNetworkStatusChange',
    'offPageNotFound',
    'offUnhandledRejection',
    'offUserCaptureScreen',
    'onAccelerometerChange',
    'onAppHide',
    'onAppShow',
    'onAudioInterruptionBegin',
    'onAudioInterruptionEnd',
    'onBLECharacteristicValueChange',
    'onBLEConnectionStateChange',
    'onBeaconServiceChange',
    'onBeaconUpdate',
    'onBluetoothAdapterStateChange',
    'onBluetoothDeviceFound',
    'onCompassChange',
    'onDeviceMotionChange',
    'onError',
    'onGetWifiList',
    'onGyroscopeChange',
    'onMemoryWarning',
    'onNetworkStatusChange',
    'onPageNotFound',
    'onSocketClose',
    'onSocketError',
    'onSocketMessage',
    'onSocketOpen',
    'onUnhandledRejection',
    'onUserCaptureScreen',
    'removeStorageSync',
    'reportAnalytics',
    'setStorageSync',
    'arrayBufferToBase64',
    'base64ToArrayBuffer',
    'canIUse',
    'createAnimation',
    'createCameraContext',
    'createCanvasContext',
    'createInnerAudioContext',
    'createIntersectionObserver',
    'createInterstitialAd',
    'createLivePlayerContext',
    'createMapContext',
    'createSelectorQuery',
    'createVideoContext',
    'getBackgroundAudioManager',
    'getMenuButtonBoundingClientRect',
    'getRecorderManager',
    'getUpdateManager'
]);
var needPromiseApis = new Set([
    'addPhoneContact',
    'authorize',
    'canvasGetImageData',
    'canvasPutImageData',
    'canvasToTempFilePath',
    'checkSession',
    'chooseAddress',
    'chooseImage',
    'chooseInvoiceTitle',
    'chooseLocation',
    'chooseVideo',
    'clearStorage',
    'closeBLEConnection',
    'closeBluetoothAdapter',
    'closeSocket',
    'compressImage',
    'connectSocket',
    'createBLEConnection',
    'downloadFile',
    'getAvailableAudioSources',
    'getBLEDeviceCharacteristics',
    'getBLEDeviceServices',
    'getBatteryInfo',
    'getBeacons',
    'getBluetoothAdapterState',
    'getBluetoothDevices',
    'getClipboardData',
    'getConnectedBluetoothDevices',
    'getConnectedWifi',
    'getExtConfig',
    'getFileInfo',
    'getImageInfo',
    'getLocation',
    'getNetworkType',
    'getSavedFileInfo',
    'getSavedFileList',
    'getScreenBrightness',
    'getSetting',
    'getStorage',
    'getStorageInfo',
    'getSystemInfo',
    'getUserInfo',
    'getWifiList',
    'hideHomeButton',
    'hideShareMenu',
    'hideTabBar',
    'hideTabBarRedDot',
    'loadFontFace',
    'login',
    'makePhoneCall',
    'navigateBack',
    'navigateBackMiniProgram',
    'navigateTo',
    'navigateToBookshelf',
    'navigateToMiniProgram',
    'notifyBLECharacteristicValueChange',
    'hideKeyboard',
    'hideLoading',
    'hideNavigationBarLoading',
    'hideToast',
    'openBluetoothAdapter',
    'openDocument',
    'openLocation',
    'openSetting',
    'pageScrollTo',
    'previewImage',
    'queryBookshelf',
    'reLaunch',
    'readBLECharacteristicValue',
    'redirectTo',
    'removeSavedFile',
    'removeStorage',
    'removeTabBarBadge',
    'requestSubscribeMessage',
    'saveFile',
    'saveImageToPhotosAlbum',
    'saveVideoToPhotosAlbum',
    'scanCode',
    'sendSocketMessage',
    'setBackgroundColor',
    'setBackgroundTextStyle',
    'setClipboardData',
    'setEnableDebug',
    'setInnerAudioOption',
    'setKeepScreenOn',
    'setNavigationBarColor',
    'setNavigationBarTitle',
    'setScreenBrightness',
    'setStorage',
    'setTabBarBadge',
    'setTabBarItem',
    'setTabBarStyle',
    'showActionSheet',
    'showFavoriteGuide',
    'showLoading',
    'showModal',
    'showShareMenu',
    'showTabBar',
    'showTabBarRedDot',
    'showToast',
    'startBeaconDiscovery',
    'startBluetoothDevicesDiscovery',
    'startDeviceMotionListening',
    'startPullDownRefresh',
    'stopBeaconDiscovery',
    'stopBluetoothDevicesDiscovery',
    'stopCompass',
    'startCompass',
    'startAccelerometer',
    'stopAccelerometer',
    'showNavigationBarLoading',
    'stopDeviceMotionListening',
    'stopPullDownRefresh',
    'switchTab',
    'uploadFile',
    'vibrateLong',
    'vibrateShort',
    'writeBLECharacteristicValue'
]);
function getCanIUseWebp(taro) {
    return function () {
        if (typeof taro.getSystemInfoSync !== 'function') {
            console.error('不支持 API canIUseWebp');
            return false;
        }
        var ref = taro.getSystemInfoSync();
        var platform = ref.platform;
        var platformLower = platform.toLowerCase();
        if (platformLower === 'android' || platformLower === 'devtools') {
            return true;
        }
        return false;
    };
}
function getNormalRequest(global) {
    return function request(options) {
        options = options || {};
        if (typeof options === 'string') {
            options = {
                url: options
            };
        }
        var originSuccess = options.success;
        var originFail = options.fail;
        var originComplete = options.complete;
        var requestTask;
        var p = new Promise(function (resolve, reject) {
            options.success = function (res) {
                originSuccess && originSuccess(res);
                resolve(res);
            };
            options.fail = function (res) {
                originFail && originFail(res);
                reject(res);
            };
            options.complete = function (res) {
                originComplete && originComplete(res);
            };
            requestTask = global.request(options);
        });
        p.abort = function (cb) {
            cb && cb();
            if (requestTask) {
                requestTask.abort();
            }
            return p;
        };
        return p;
    };
}
function processApis(taro, global, config) {
    if ( config === void 0 ) config = {};

    var patchNoPromiseApis = config.noPromiseApis || [];
    var patchNeedPromiseApis = config.needPromiseApis || [];
    var _noPromiseApis = new Set(patchNoPromiseApis.concat( noPromiseApis));
    var _needPromiseApis = new Set(patchNeedPromiseApis.concat( needPromiseApis));
    var apis = _noPromiseApis.concat( _needPromiseApis);
    apis.forEach(function (key) {
        if (_needPromiseApis.has(key)) {
            var originKey = key;
            taro[originKey] = function (options) {
                if ( options === void 0 ) options = {};
                var args = [], len = arguments.length - 1;
                while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

                var key = originKey;
                // 第一个参数 options 为字符串，单独处理
                if (typeof options === 'string') {
                    if (args.length) {
                        return global[key].apply(global, [ options ].concat( args ));
                    }
                    return global[key](options);
                }
                // 改变 key 或 option 字段，如需要把支付宝标准的字段对齐微信标准的字段
                if (config.transformMeta) {
                    var transformResult = config.transformMeta(key, options);
                    key = transformResult.key;
                    options = transformResult.options;
                    // 新 key 可能不存在
                    if (!global.hasOwnProperty(key)) {
                        return unsupport(key)();
                    }
                }
                var task = null;
                var obj = Object.assign({}, options);
                // 为页面跳转相关的 API 设置一个随机数作为路由参数。为了给 runtime 区分页面。
                setUniqueKeyToRoute(key, options);
                // Promise 化
                var p = new Promise(function (resolve, reject) {
                    obj.success = function (res) {
                        var _a, _b;
                        (_a = config.modifyAsyncResult) === null || _a === void 0 ? void 0 : _a.call(config, key, res);
                        (_b = options.success) === null || _b === void 0 ? void 0 : _b.call(options, res);
                        if (key === 'connectSocket') {
                            resolve(Promise.resolve().then(function () { return Object.assign(task, res); }));
                        }
                        else {
                            resolve(res);
                        }
                    };
                    obj.fail = function (res) {
                        var _a;
                        (_a = options.fail) === null || _a === void 0 ? void 0 : _a.call(options, res);
                        reject(res);
                    };
                    obj.complete = function (res) {
                        var _a;
                        (_a = options.complete) === null || _a === void 0 ? void 0 : _a.call(options, res);
                    };
                    if (args.length) {
                        task = global[key].apply(global, [ obj ].concat( args ));
                    }
                    else {
                        task = global[key](obj);
                    }
                });
                // 给 promise 对象挂载属性
                if (key === 'uploadFile' || key === 'downloadFile') {
                    p.progress = function (cb) {
                        task === null || task === void 0 ? void 0 : task.onProgressUpdate(cb);
                        return p;
                    };
                    p.abort = function (cb) {
                        cb === null || cb === void 0 ? void 0 : cb();
                        task === null || task === void 0 ? void 0 : task.abort();
                        return p;
                    };
                }
                return p;
            };
        }
        else {
            // API 不存在
            if (!global.hasOwnProperty(key)) {
                taro[key] = unsupport(key);
                return;
            }
            taro[key] = function () {
                var args = [], len = arguments.length;
                while ( len-- ) args[ len ] = arguments[ len ];

                if (config.handleSyncApis) {
                    return config.handleSyncApis(key, global, args);
                }
                else {
                    return global[key].apply(global, args);
                }
            };
        }
    });
    !config.isOnlyPromisify && equipCommonApis(taro, global, config);
}
/**
 * 挂载常用 API
 * @param taro Taro 对象
 * @param global 小程序全局对象，如微信的 wx，支付宝的 my
 */
function equipCommonApis(taro, global, apis) {
    if ( apis === void 0 ) apis = {};

    taro.canIUseWebp = getCanIUseWebp(taro);
    taro.getCurrentPages = getCurrentPages || unsupport('getCurrentPages');
    taro.getApp = getApp || unsupport('getApp');
    taro.env = global.env || {};
    try {
        taro.requirePlugin = requirePlugin || unsupport('requirePlugin');
    }
    catch (error) {
        taro.requirePlugin = unsupport('requirePlugin');
    }
    // request & interceptors
    var request = apis.request ? apis.request : getNormalRequest(global);
    function taroInterceptor(chain) {
        return request(chain.requestParams);
    }
    var link = new taro.Link(taroInterceptor);
    taro.request = link.request.bind(link);
    taro.addInterceptor = link.addInterceptor.bind(link);
    taro.cleanInterceptors = link.cleanInterceptors.bind(link);
    taro.miniGlobal = global;
}

exports.BaseTemplate = BaseTemplate;
exports.EMPTY_ARR = EMPTY_ARR;
exports.EMPTY_OBJ = EMPTY_OBJ;
exports.RecursiveTemplate = RecursiveTemplate;
exports.UnRecursiveTemplate = UnRecursiveTemplate;
exports.animationEvents = animationEvents;
exports.box = box;
exports.cacheDataGet = cacheDataGet;
exports.cacheDataHas = cacheDataHas;
exports.cacheDataSet = cacheDataSet;
exports.capitalize = capitalize;
exports.controlledComponent = controlledComponent;
exports.defaultReconciler = defaultReconciler;
exports.ensure = ensure;
exports.events = events;
exports.focusComponents = focusComponents;
exports.getUniqueKey = getUniqueKey;
exports.hasOwn = hasOwn;
exports.internalComponents = internalComponents;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isBooleanStringLiteral = isBooleanStringLiteral;
exports.isFunction = isFunction;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.isUndefined = isUndefined;
exports.mergeInternalComponents = mergeInternalComponents;
exports.mergeReconciler = mergeReconciler;
exports.nestElements = nestElements;
exports.noop = noop;
exports.processApis = processApis;
exports.queryToJson = queryToJson;
exports.setUniqueKeyToRoute = setUniqueKeyToRoute;
exports.singleQuote = singleQuote;
exports.specialEvents = specialEvents;
exports.styles = styles;
exports.toCamelCase = toCamelCase;
exports.toDashed = toDashed;
exports.toKebabCase = toKebabCase;
exports.touchEvents = touchEvents;
exports.unbox = unbox;
exports.unsupport = unsupport;
exports.voidElements = voidElements;
exports.warn = warn;
//# sourceMappingURL=index.js.map

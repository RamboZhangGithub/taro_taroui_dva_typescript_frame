import Reconciler from 'react-reconciler';
import * as scheduler from 'scheduler';
import { FormElement, document } from '@tarojs/runtime';
import { isString, isObject, isFunction, capitalize, toCamelCase, internalComponents, isNumber, EMPTY_ARR, noop, ensure } from '@tarojs/shared';

function isEventName(s) {
    return s[0] === 'o' && s[1] === 'n';
}
const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i;
function updateProps(dom, oldProps, newProps) {
    let i;
    for (i in oldProps) {
        if (!(i in newProps)) {
            setProperty(dom, i, null, oldProps[i]);
        }
    }
    const isFormElement = dom instanceof FormElement;
    for (i in newProps) {
        if (oldProps[i] !== newProps[i] || (isFormElement && i === 'value')) {
            setProperty(dom, i, newProps[i], oldProps[i]);
        }
    }
}
// function eventProxy (e: CommonEvent) {
//   const el = document.getElementById(e.currentTarget.id)
//   const handlers = el!.__handlers[e.type]
//   handlers[0](e)
// }
function setEvent(dom, name, value, oldValue) {
    const isCapture = name.endsWith('Capture');
    let eventName = name.toLowerCase().slice(2);
    if (isCapture) {
        eventName = eventName.slice(0, -7);
    }
    const compName = capitalize(toCamelCase(dom.tagName.toLowerCase()));
    if (eventName === 'click' && compName in internalComponents) {
        eventName = 'tap';
    }
    if (isFunction(value)) {
        if (!oldValue) {
            dom.addEventListener(eventName, value, isCapture);
        }
        if (eventName === 'regionchange') {
            dom.__handlers.begin[0] = value;
            dom.__handlers.end[0] = value;
        }
        else {
            dom.__handlers[eventName][0] = value;
        }
    }
    else {
        dom.removeEventListener(eventName, oldValue);
    }
}
function setStyle(style, key, value) {
    if (key[0] === '-') {
        style.setProperty(key, value.toString());
    }
    style[key] =
        isNumber(value) && IS_NON_DIMENSIONAL.test(key) === false
            ? value + 'px'
            : value == null
                ? ''
                : value;
}
function setProperty(dom, name, value, oldValue) {
    var _a, _b, _c, _d;
    name = name === 'className' ? 'class' : name;
    if (name === 'key' ||
        name === 'children' ||
        name === 'ref') ;
    else if (name === 'style') {
        const style = dom.style;
        if (isString(value)) {
            style.cssText = value;
        }
        else {
            if (isString(oldValue)) {
                style.cssText = '';
                oldValue = null;
            }
            if (isObject(oldValue)) {
                for (const i in oldValue) {
                    if (!(value && i in value)) {
                        setStyle(style, i, '');
                    }
                }
            }
            if (isObject(value)) {
                for (const i in value) {
                    if (!oldValue || value[i] !== oldValue[i]) {
                        setStyle(style, i, value[i]);
                    }
                }
            }
        }
    }
    else if (isEventName(name)) {
        setEvent(dom, name, value, oldValue);
    }
    else if (name === 'dangerouslySetInnerHTML') {
        const newHtml = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.__html) !== null && _b !== void 0 ? _b : '';
        const oldHtml = (_d = (_c = oldValue) === null || _c === void 0 ? void 0 : _c.__html) !== null && _d !== void 0 ? _d : '';
        if (newHtml || oldHtml) {
            if (oldHtml !== newHtml) {
                dom.innerHTML = newHtml;
            }
        }
    }
    else if (!isFunction(value)) {
        if (value == null) {
            dom.removeAttribute(name);
        }
        else {
            dom.setAttribute(name, value);
        }
    }
}

/* eslint-disable @typescript-eslint/indent */
const { unstable_scheduleCallback: scheduleDeferredCallback, unstable_cancelCallback: cancelDeferredCallback, unstable_now: now } = scheduler;
function returnFalse() {
    return false;
}
const hostConfig = {
    createInstance(type) {
        return document.createElement(type);
    },
    createTextInstance(text) {
        return document.createTextNode(text);
    },
    getPublicInstance(inst) {
        return inst;
    },
    getRootHostContext() {
        return {};
    },
    getChildHostContext() {
        return {};
    },
    appendChild(parent, child) {
        parent.appendChild(child);
    },
    appendInitialChild(parent, child) {
        parent.appendChild(child);
    },
    appendChildToContainer(parent, child) {
        parent.appendChild(child);
    },
    removeChild(parent, child) {
        parent.removeChild(child);
    },
    removeChildFromContainer(parent, child) {
        parent.removeChild(child);
    },
    insertBefore(parent, child, refChild) {
        parent.insertBefore(child, refChild);
    },
    insertInContainerBefore(parent, child, refChild) {
        parent.insertBefore(child, refChild);
    },
    commitTextUpdate(textInst, _, newText) {
        textInst.nodeValue = newText;
    },
    finalizeInitialChildren(dom, _, props) {
        updateProps(dom, {}, props);
        return false;
    },
    prepareUpdate() {
        return EMPTY_ARR;
    },
    commitUpdate(dom, _payload, _type, oldProps, newProps) {
        updateProps(dom, oldProps, newProps);
    },
    hideInstance(instance) {
        const style = instance.style;
        style.setProperty('display', 'none');
    },
    unhideInstance(instance, props) {
        const styleProp = props.style;
        let display = (styleProp === null || styleProp === void 0 ? void 0 : styleProp.hasOwnProperty('display')) ? styleProp.display : null;
        display = display == null || typeof display === 'boolean' || display === '' ? '' : ('' + display).trim();
        // eslint-disable-next-line dot-notation
        instance.style['display'] = display;
    },
    shouldSetTextContent: returnFalse,
    shouldDeprioritizeSubtree: returnFalse,
    prepareForCommit: noop,
    resetAfterCommit: noop,
    commitMount: noop,
    now,
    scheduleDeferredCallback,
    cancelDeferredCallback,
    clearTimeout: clearTimeout,
    setTimeout: setTimeout,
    noTimeout: -1,
    supportsMutation: true,
    supportsPersistence: false,
    isPrimaryRenderer: true,
    supportsHydration: false
};
const TaroReconciler = Reconciler(hostConfig);

const ContainerMap = new WeakMap();
class Root {
    constructor(renderer, domContainer) {
        this.renderer = renderer;
        this.internalRoot = renderer.createContainer(domContainer, false, false);
    }
    render(children, cb) {
        this.renderer.updateContainer(children, this.internalRoot, null, cb);
        return this.renderer.getPublicRootInstance(this.internalRoot);
    }
    unmount(cb) {
        this.renderer.updateContainer(null, this.internalRoot, null, cb);
    }
}
function render(element, domContainer, cb) {
    const oldRoot = ContainerMap.get(domContainer);
    if (oldRoot != null) {
        return oldRoot.render(element, cb);
    }
    const root = new Root(TaroReconciler, domContainer);
    ContainerMap.set(domContainer, root);
    return root.render(element, cb);
}

/* eslint-disable @typescript-eslint/no-unused-vars */
const unstable_batchedUpdates = TaroReconciler.batchedUpdates;
function unmountComponentAtNode(dom) {
    ensure(dom && [1, 8, 9, 11].includes(dom.nodeType), 'unmountComponentAtNode(...): Target container is not a DOM element.');
    const root = ContainerMap.get(dom);
    if (!root)
        return false;
    unstable_batchedUpdates(() => {
        root.unmount(() => {
            ContainerMap.delete(dom);
        });
    });
    return true;
}
function findDOMNode(comp) {
    if (comp == null) {
        return null;
    }
    const nodeType = comp.nodeType;
    if (nodeType === 1 || nodeType === 3) {
        return comp;
    }
    return TaroReconciler.findHostInstance(comp);
}
const portalType = typeof Symbol === 'function' && Symbol.for
    ? Symbol.for('react.portal')
    : 0xeaca;
function createPortal(children, containerInfo, key) {
    return {
        $$typeof: portalType,
        key: key == null ? null : String(key),
        children,
        containerInfo,
        implementation: null
    };
}
var index = {
    render,
    unstable_batchedUpdates,
    unmountComponentAtNode,
    findDOMNode,
    createPortal
};

export default index;
export { createPortal, findDOMNode, render, unmountComponentAtNode, unstable_batchedUpdates };
//# sourceMappingURL=react.esm.js.map

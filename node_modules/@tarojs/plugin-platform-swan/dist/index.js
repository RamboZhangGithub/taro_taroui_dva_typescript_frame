'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var shared = require('@tarojs/shared');

const swanSpecialAttrs = {
    'scroll-view': ['scrollTop', 'scrollLeft', 'scrollIntoView'],
    'movable-view': ['x', 'y'],
    slider: ['value'],
    input: ['value'],
    textarea: ['value']
};
class Template extends shared.RecursiveTemplate {
    constructor() {
        super(...arguments);
        this.supportXS = true;
        this.Adapter = {
            if: 's-if',
            else: 's-else',
            elseif: 's-elif',
            for: 's-for',
            forItem: 's-for-item',
            forIndex: 's-for-index',
            key: 's-key',
            xs: 'sjs',
            type: 'swan'
        };
        this.modifyLoopBody = (child, nodeName) => {
            if (nodeName === 'text' || nodeName === 'static-text') {
                return `<block>{{ i.${"cn" /* Childnodes */}[index].${"v" /* Text */} }}</block>`;
            }
            return child;
        };
    }
    buildXsTemplate() {
        return '<import-sjs module="xs" src="./utils.sjs" />';
    }
    dataKeymap(keymap) {
        return `{ ${keymap} }`;
    }
    getAttrValue(value, key, nodeName) {
        if (shared.isArray(swanSpecialAttrs[nodeName]) && swanSpecialAttrs[nodeName].includes(key)) {
            return `= ${value} =`;
        }
        return `{ ${value} }`;
    }
}

const components = {
    // ======== 调整属性 ========
    Progress: {
        'border-radius': '0',
        'font-size': '16',
        duration: '30'
    },
    RichText: {
        selectable: 'false',
        name: '',
        attrs: '',
        children: '[]',
        text: '',
        'image-menu-prevent': 'false',
        preview: ''
    },
    Map: {
        polygons: '[]',
        'enable-3D': 'false',
        'show-compass': 'false',
        'enable-overlooking': 'false',
        'enable-zoom': 'true',
        'enable-scroll': 'true',
        'enable-rotate': 'false',
        bindRegionChange: '',
        bindPoiTap: ''
    },
    Button: {
        bindGetPhoneNumber: '',
        bindGetUserInfo: '',
        bindOpenSetting: '',
        bindContact: '',
        bindChooseAddress: '',
        bindChooseInvoiceTitle: ''
    },
    Form: {
        'report-type': 'default',
        'template-id': '',
        'subscribe-id': ''
    },
    Input: {
        'adjust-position': 'true'
    },
    Textarea: {
        'confirm-type': shared.singleQuote('default'),
        'confirm-hold': 'false',
        'show-confirm-bar': 'true',
        'adjust-position': 'true'
    },
    Navigator: {
        target: shared.singleQuote('self'),
        'app-id': '',
        path: '',
        'extra-data': '',
        version: shared.singleQuote('version')
    },
    Image: {
        webp: 'false',
        'image-menu-prevent': 'false',
        preview: '',
        'original-src': ''
    },
    Video: {
        title: '',
        'show-no-wifi-tip': 'true',
        'vslide-gesture': 'false',
        'vslide-gesture-in-fullscreen': 'true',
        'enable-play-gesture': 'false',
        'show-rate-btn': 'false',
        'show-vslide-btn-in-fullscreen': 'true',
        'silent-play': 'false',
        bindLoadedMetadata: ''
    },
    Ad: {
        appid: '',
        apid: '',
        type: shared.singleQuote('feed'),
        updatetime: '',
        bindStatus: ''
    },
    // ======== 额外组件 ========
    Tabs: {
        'tabs-background-color': shared.singleQuote('#fff'),
        'tabs-active-text-color': shared.singleQuote('#000'),
        'tabs-inactive-text-color': shared.singleQuote('#666'),
        'tabs-underline-color': shared.singleQuote('#333'),
        'active-name': '',
        'url-query-name': '',
        'max-tab-item-amount': '5',
        bindTabChange: ''
    },
    TabItem: {
        label: '',
        name: '',
        'badge-type': '',
        'badge-text': ''
    },
    AnimationVideo: {
        'resource-width': '800',
        'resource-height': '400',
        'canvas-style': shared.singleQuote('width:400px;height:400px'),
        path: '',
        loop: 'fasle',
        autoplay: 'fasle',
        bindStarted: '',
        bindEnded: ''
    },
    AnimationView: {
        path: '',
        loop: 'false',
        autoplay: 'true',
        action: shared.singleQuote('play'),
        hidden: 'true',
        bindEnded: ''
    },
    ArCamera: {
        key: '',
        type: '',
        flash: shared.singleQuote('off'),
        bindError: '',
        bindLoad: '',
        bindMessage: '',
        bindScanCode: ''
    },
    RtcRoom: {
        id: '',
        'enable-camera': 'true',
        'enable-auto-focus': 'true',
        'enable-zoom': 'false',
        'device-position': shared.singleQuote('front'),
        'enable-mic': 'true',
        'enable-agc': 'false',
        'enable-ans': 'false',
        bitrate: '900',
        'video-width': '360',
        'video-height': '640',
        'enable-remote-mirror': 'false',
        'local-mirror': shared.singleQuote('auto'),
        'sound-mode': shared.singleQuote('speaker'),
        bindStateChange: '',
        bindError: ''
    },
    RtcRoomItem: {
        id: '',
        type: '',
        'user-id': ''
    },
    OpenData: {
        type: ''
    }
};

const PACKAGE_NAME = '@tarojs/plugin-platform-swan';
const PROJECT_JSON = 'project.swan.json';
class Swan extends service.TaroPlatformBase {
    /**
     * 1. setupTransaction - init
     * 2. setup
     * 3. setupTransaction - close
     * 4. buildTransaction - init
     * 5. build
     * 6. buildTransaction - close
     */
    constructor(ctx, config) {
        super(ctx, config);
        this.platform = 'swan';
        this.globalObject = 'swan';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.taroComponentsPath = `${PACKAGE_NAME}/dist/components-react`;
        this.fileType = {
            templ: '.swan',
            style: '.css',
            config: '.json',
            script: '.js',
            xs: '.sjs'
        };
        this.template = new Template();
        this.setupTransaction.addWrapper({
            close() {
                this.modifyComponents();
                ctx.generateFrameworkInfo();
                this.generateProjectConfig(PROJECT_JSON, PROJECT_JSON);
            }
        });
    }
    /**
     * 增加组件或修改组件属性
     */
    modifyComponents() {
        this.template.mergeComponents(this.ctx, components);
    }
}

var index = (ctx) => {
    ctx.registerPlatform({
        name: 'swan',
        useConfigName: 'mini',
        async fn({ config }) {
            const program = new Swan(ctx, config);
            await program.start();
        }
    });
};

exports.Swan = Swan;
exports.default = index;
//# sourceMappingURL=index.js.map

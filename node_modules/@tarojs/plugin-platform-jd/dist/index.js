'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var service = require('@tarojs/service');
var shared = require('@tarojs/shared');

class Template extends shared.UnRecursiveTemplate {
    constructor() {
        super(...arguments);
        this.supportXS = false;
        this.Adapter = {
            if: 'jd:if',
            else: 'jd:else',
            elseif: 'jd:elif',
            for: 'jd:for',
            forItem: 'jd:for-item',
            forIndex: 'jd:for-index',
            key: 'jd:key',
            type: 'jd'
        };
    }
    replacePropName(name, value) {
        if (name === 'bingdlongtap')
            return 'bindlongpress';
        if (value === 'eh')
            return name.toLowerCase();
        return name;
    }
}

const PACKAGE_NAME = '@tarojs/plugin-platform-jd';
class JD extends service.TaroPlatformBase {
    constructor() {
        super(...arguments);
        this.platform = 'jd';
        this.globalObject = 'jd';
        this.projectConfigJson = 'project.jd.json';
        this.runtimePath = `${PACKAGE_NAME}/dist/runtime`;
        this.fileType = {
            templ: '.jxml',
            style: '.jxss',
            config: '.json',
            script: '.js'
        };
        this.template = new Template();
    }
}

var index = (ctx) => {
    ctx.registerPlatform({
        name: 'jd',
        useConfigName: 'mini',
        async fn({ config }) {
            const program = new JD(ctx, config);
            await program.start();
        }
    });
};

exports.JD = JD;
exports.default = index;
//# sourceMappingURL=index.js.map

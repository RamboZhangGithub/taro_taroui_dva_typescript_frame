import { r as registerInstance, c as createEvent, h, H as Host } from './index-310de3d5.js';
import { c as classnames } from './index-e58a2d48.js';

const navigatorCss = ".navigator-hover{background:#efefef}";

const Taro = require('@tarojs/taro');
const Navigator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.onSuccess = createEvent(this, "cuccess", 7);
    this.onFail = createEvent(this, "fail", 7);
    this.onComplete = createEvent(this, "Complete", 7);
    this.openType = 'navigate';
    this.isHover = false;
    this.delta = 0;
  }
  onClick() {
    const { openType, onSuccess, onFail, onComplete } = this;
    let promise = Promise.resolve();
    switch (openType) {
      case 'navigate':
        promise = Taro.navigateTo({
          url: this.url
        });
        break;
      case 'redirect':
        promise = Taro.redirectTo({
          url: this.url
        });
        break;
      case 'switchTab':
        promise = Taro.switchTab({
          url: this.url
        });
        break;
      case 'reLaunch':
        promise = Taro.reLaunch({
          url: this.url
        });
        break;
      case 'navigateBack':
        promise = Taro.navigateBack({
          delta: this.delta
        });
        break;
      case 'exit':
        promise = Promise.reject(new Error('navigator:fail 暂不支持"openType: exit"'));
        break;
    }
    if (promise) {
      promise.then(res => {
        onSuccess.emit(res);
      }).catch(res => {
        onFail.emit(res);
      }).finally(() => {
        onComplete.emit();
      });
    }
  }
  render() {
    const { isHover, hoverClass } = this;
    return (h(Host, { class: classnames({
        [hoverClass]: isHover
      }) }));
  }
};
Navigator.style = navigatorCss;

export { Navigator as taro_navigator_core };

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaroPlatformBase = void 0;
class Transaction {
    constructor() {
        this.wrappers = [];
    }
    perform(fn, scope, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.initAll(scope);
            yield fn.call(scope, ...args);
            this.closeAll(scope);
        });
    }
    initAll(scope) {
        const wrappers = this.wrappers;
        wrappers.forEach(wrapper => { var _a; return (_a = wrapper.init) === null || _a === void 0 ? void 0 : _a.call(scope); });
    }
    closeAll(scope) {
        const wrappers = this.wrappers;
        wrappers.forEach(wrapper => { var _a; return (_a = wrapper.close) === null || _a === void 0 ? void 0 : _a.call(scope); });
    }
    addWrapper(wrapper) {
        this.wrappers.push(wrapper);
    }
}
class TaroPlatformBase {
    constructor(ctx, config) {
        this.setupTransaction = new Transaction();
        this.buildTransaction = new Transaction();
        this.ctx = ctx;
        this.helper = ctx.helper;
        this.config = config;
    }
    /**
     * 1. 清空 dist 文件夹
     * 2. 输出编译提示
     * 3. 生成 project.config.json
     */
    setup() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setupTransaction.perform(this.setupImpl, this);
            (_b = (_a = this.ctx).onSetupClose) === null || _b === void 0 ? void 0 : _b.call(_a, this);
        });
    }
    setupImpl() {
        this.emptyOutputDir();
        this.printDevelopmentTip(this.platform);
        if (this.projectConfigJson) {
            this.generateProjectConfig(this.projectConfigJson);
        }
    }
    emptyOutputDir() {
        const { outputPath } = this.ctx.paths;
        this.helper.emptyDirectory(outputPath);
    }
    printDevelopmentTip(platform) {
        if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'test')
            return;
        const { isWindows, chalk } = this.helper;
        let exampleCommand;
        if (isWindows) {
            exampleCommand = `$ set NODE_ENV=production && taro build --type ${platform} --watch`;
        }
        else {
            exampleCommand = `$ NODE_ENV=production taro build --type ${platform} --watch`;
        }
        console.log(chalk.yellowBright(`Tips: 预览模式生成的文件较大，设置 NODE_ENV 为 production 可以开启压缩。
Example:
${exampleCommand}
`));
    }
    /**
     * 返回当前项目内的 @tarojs/mini-runner 包
     */
    getRunner() {
        return __awaiter(this, void 0, void 0, function* () {
            const { appPath } = this.ctx.paths;
            const { npm } = this.helper;
            const runner = yield npm.getNpmPkg('@tarojs/mini-runner', appPath);
            return runner.bind(null, appPath);
        });
    }
    /**
     * 准备 mini-runner 参数
     * @param extraOptions 需要额外合入 Options 的配置项
     */
    getOptions(extraOptions = {}) {
        const { ctx, config, globalObject, fileType, template } = this;
        return Object.assign(Object.assign(Object.assign({}, config), { nodeModulesPath: ctx.paths.nodeModulesPath, buildAdapter: config.platform, globalObject,
            fileType,
            template }), extraOptions);
    }
    /**
     * 调用 mini-runner 开始编译
     * @param extraOptions 需要额外传入 @tarojs/mini-runner 的配置项
     */
    build(extraOptions = {}) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            (_b = (_a = this.ctx).onBuildInit) === null || _b === void 0 ? void 0 : _b.call(_a, this);
            yield this.buildTransaction.perform(this.buildImpl, this, extraOptions);
        });
    }
    buildImpl(extraOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const runner = yield this.getRunner();
            const options = this.getOptions(Object.assign({
                runtimePath: this.runtimePath,
                taroComponentsPath: this.taroComponentsPath
            }, extraOptions));
            runner(options);
        });
    }
    /**
     * 生成 project.config.json
     * @param src 项目源码中配置文件的名称
     * @param dist 编译后配置文件的名称，默认为 'project.config.json'
     */
    generateProjectConfig(src, dist = 'project.config.json') {
        if (this.config.isBuildNativeComp)
            return;
        this.ctx.generateProjectConfig({
            srcConfigName: src,
            distConfigName: dist
        });
    }
    /**
     * 递归替换对象的 key 值
     */
    recursiveReplaceObjectKeys(obj, keyMap) {
        Object.keys(obj).forEach(key => {
            if (keyMap[key]) {
                obj[keyMap[key]] = obj[key];
                if (typeof obj[key] === 'object') {
                    this.recursiveReplaceObjectKeys(obj[keyMap[key]], keyMap);
                }
                delete obj[key];
            }
            else if (keyMap[key] === false) {
                delete obj[key];
            }
            else if (typeof obj[key] === 'object') {
                this.recursiveReplaceObjectKeys(obj[key], keyMap);
            }
        });
    }
    /**
     * 调用 mini-runner 开启编译
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setup();
            yield this.build();
        });
    }
}
exports.TaroPlatformBase = TaroPlatformBase;
